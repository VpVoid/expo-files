# -*- coding: utf-8 -*-
"""Exportaciones Panamá.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NwcUeGJUs0MfqUkI18H6Qu4GiNBmMsT_
"""

!pip install jupyter-dash -q
!pip install dash-cytoscape -q
!pip install jupyterlab
!jupyter labextension install jupyterlab-plotly@4.14.3

!pip install geoplot
!pip install geopandas
!pip install prettytable
!pip install dash-bootstrap-components

!pip install psycopg2-binary
!pip install plotly
!pip install pandas
!pip install pathlib
!pip install dash

"""IMPORTS"""

import psycopg2   
import pandas as pd
import csv
from prettytable import PrettyTable
from prettytable import from_db_cursor
from psycopg2 import connect
import plotly.express as px
import geopandas as gpd

"""BASE DE DATOS"""

##Importar base de datos desde Heroku
conn = psycopg2.connect(
    host="ec2-44-195-162-77.compute-1.amazonaws.com",
    database="d2qf1tcu7b4kkg",
    user="vskurpbvojnwkm",
    password="61a215bd5ffa79ccdea34b7987605472880f14ca2d2335fd8e46263d7edce73f")

cur = conn.cursor() ##Cursor de la base de datos

## Función para convertir el resultado de Tupla a String, necesario para que el Patch del pais funcione.

def convertTuple(tup):
        # initialize an empty string
    str = ''
    for item in tup:
        str = str + item
    return str

#Query de prueba para revisar la base de datos

query = '''SELECT DISTINCT paises->>'pais' as Pais
        from expo
        '''
cur.execute(query)

##############################
## Lineas a utilizar cuando necesitemos el resultado en string:

# results = cur.fetchall()
# for line, res in zip(range(len(results)), results):
#     paises.append(convertTuple(res))
# print(paises)

#############################

cur.execute(query)
tabla = from_db_cursor(cur)

print (tabla)

"""GEOJSON y CSV"""

world = gpd.read_file('https://raw.githubusercontent.com/VpVoid/expo-files/main/paises2.geojson')
df = pd.read_csv("https://raw.githubusercontent.com/VpVoid/expo-files/main/exportaciones_p.csv", sep=';', encoding='latin1', dtype={"name": str})
index = pd.read_csv("https://raw.githubusercontent.com/VpVoid/expo-files/main/indice_productos.csv", sep=';', encoding='latin1')

# world = gpd.read_file('paises2.geojson')
# df = pd.read_csv("exportaciones_p.csv", sep=';', encoding='latin1', dtype={"name": str})
# index = pd.read_csv("indice_productos.csv", sep=';', encoding='latin1')

ind = pd.DataFrame(index)
id_prod = ind.iloc[:, 0]
nom_prod = ind.iloc[:, 1]

"""MAPA Y QUERY"""

##QUERY QUE PEDIRA EL DASH

def query(codigo):

  query = '''SELECT paises->>'pais' as Pais, paises->>'peso_neto' as Peso, paises->>'valor' as Valor, paises->>'unidad_medida'
        from expo
        where paises->>'id_producto' = ''' + "'" + codigo + ''''
        '''
  cur.execute(query)

  pais = []
  peso = []
  valor = []
  unidad = []

  results = cur.fetchall() ##Fetchall porque necesitamos los resultados en una variable

  for line in range(len(results)):
    for x in range(4):
      if (x==0):
        pais.append(results[line][x])
      if (x==1):
        peso.append(int(results[line][x]))
      if (x==2):
        valor.append(int(results[line][x]))
      if (x==3):
        unidad.append(results[line][x])
 
 ##Anterior
  # query = '''SELECT paises->>'pais' as Pais
  #       from expo
  #       where paises->>'id_producto' = ''' + "'" + codigo + ''''
  #       '''
  # cur.execute(query) 
  # paises = []
  # results = cur.fetchall() ##Fetchall porque necesitamos los resultados en una variable

  # for line, res in zip(range(len(results)), results): ## Ciclo For para añadir cada resultado a la lista paises como Strings
  #   paises.append(convertTuple(res))

  return pais, peso, valor, unidad

print(id_prod[2])

# paises = []   ##Lista vacia para que le asignemos los resultados, gracias a la funcion ConvertTuple que vuelve el resultado a Strings

# ad = id_prod[55]

# query = '''SELECT paises->>'pais' as Pais
#         from expo
#         where paises->>'id_producto' = ''' + "'" + ad + ''''
#         '''

# cur.execute(query) 

# results = cur.fetchall() ##Fetchall porque necesitamos los resultados en una variable
    
# for line, res in zip(range(len(results)), results): ## Ciclo For para añadir cada resultado a la lista paises como Strings
#     paises.append(convertTuple(res))

# color = []

# for x in paises:
#   color.append(1)

# fig = px.choropleth(df, geojson=world, locations=paises, color=[1,1,1], featureidkey="properties.name", 
#                     )#color=color para un solo color o paises para indice

# fig.update_layout(geo = dict(showlakes=False))
# # fig.update_geos(projection_type="orthographic")
# fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
# fig.update_geos(showcountries=True, countrycolor="darkslategray")
# fig.update(layout_coloraxis_showscale=False)
# # fig.show()

# ##Contextly mapa

"""### DASH

Dropdown de Productos
Dropdown con Opciones:
- Mostrar solo paises
- Mostrar paises y pesos (con gráfica abajo)
- Mostrar paises y valor (balboas) (con gráfica abajo)

Dropdown de Paises mas abajo:
- Mostrar gráfica de productos por precio o por peso

DASH CON DROPDOWN
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from jupyter_dash import JupyterDash  # pip install dash
import dash_cytoscape as cyto  # pip install dash-cytoscape==0.2.0 or higher
import dash
import dash_core_components as dcc
import dash_bootstrap_components as dbc
import dash_html_components as html
import plotly.graph_objects as go
import pandas as pd
import plotly.express as px
import numpy as np
from dash.dependencies import Output, Input
from dash import no_update


external_stylesheets = [
    {
        "href": "https://fonts.googleapis.com/css2?"
        "family=Lato:wght@400;700&display=swap",
        "rel": "stylesheet",
    },
]

app = JupyterDash(__name__, external_stylesheets=external_stylesheets) #JupyterDash en ves de dash.Dash
app.title = "Prueba"

app.layout = html.Div(
 
     children=[
        html.Div(
            children=[
                html.Br(),
                html.Br(),
                html.Br(),
                html.H1(
                    children="Exportaciones de Panamá", className="header-title"
                ),
                html.P(
                    children="Mapa interactivo de las exportaciones de Panamá en el año 2020",
                    className="header-description",
                ),
            ],
            className="header",
       ),

    ######Dropdowns

         html.Div(
          children=[
              html.Div(
                  children=[
                      html.Div(children="Productos", className="menu-title"),
                      dcc.Dropdown(
                          id="product",
                          options=[{"label":str(nom_prod[i]),"value":str(id_prod[i])} for i in range(len(nom_prod))], #{"label":str(nom_prod[i]),"value":str(id_prod[i])} for i in range(len(nom_prod))
                          multi = False,
                          value = id_prod[28],
                          className="dropdown",
                      ),
                  ], style={"width": "75%"}
              ),

              html.Div(
                  children=[
                      html.Div(children="Visualización", className="menu-title"),
                      dcc.Dropdown(
                          id="options",
                          options=[{"label": "Solo Paises","value": 1},
                                {"label": "Por Peso","value": 2},
                                {"label": "por Valor (Balboas)", "value": 3}],
                          multi = False,
                          value = 1,
                          clearable=False,
                          searchable=False,
                          className="dropdown",
                      ),
                  ],
              ),
          ],
          className="menu",
        ),
        
      ########Mapa y Gráfica
        html.Div(
            children=[
                html.Div(
                    children=dcc.Graph(id='mapa', config={"displayModeBar": False}, figure={}, style={'width': '70vw', 'height': '80vh'}),
                    className="card",
                ),
            ],
            className="wrapper",
        ),

        html.Div(
            children=[
                html.Div(
                    children= dbc.Col(dcc.Graph(id="graph", config={"displayModeBar": False}, style={'width': '70vw', 'height': '80vh'})),
                    className="card",
                ),
            ],
            className="wrapper",
        )
    ]
)

@app.callback(
    [ Output(component_id='mapa', component_property='figure'),
      # Output(component_id='muestra', component_property='children'),
      Output("graph", "figure")
      ],

    [ Input(component_id='product', component_property='value'),
      Input(component_id='options', component_property='value'),
      ]
      )

def exports(product, options):

    print(product)

    print(type(product))

    container = "ID del producto: {}".format(product)

    # paises = query(str(product))
    a = 1
    pais, peso, valor, unidad = query(str(product))
  
    color = []

    for x in pais:
      color.append(1)

    if (product is None):

      fig = px.choropleth(df, geojson = world, locations=[""], featureidkey="properties.name")
      container = "Seleccione un producto"

    else:

      if (options == 1):

        fig = px.choropleth_mapbox(df, geojson=world, locations=pais, color=color, hover_name=pais, featureidkey="properties.name", mapbox_style="carto-positron", zoom=1.5, opacity=0.65,
                    ) #color=color para un solo color o paises para indice
        # fig = px.choropleth(df, geojson=world, locations=pais, color=color, featureidkey="properties.name", 
        #             ) #color=color para un solo color o paises para indice

        fig.update(layout_coloraxis_showscale=False)
        graph = go.Figure(
          data=[go.Bar(x=pais, y=valor, marker_color='indianred')],
        )
        graph.update_layout(
          xaxis_tickfont_size=14,
          yaxis=dict(
              title='Valor (Balboas)',
              titlefont_size=16,
              tickfont_size=14,
          ),
        )

      if (options == 2):

        fig = px.choropleth_mapbox(df, geojson=world, locations=pais, color=peso, hover_name=pais, featureidkey="properties.name", mapbox_style="carto-positron",
                                   color_continuous_scale="Agsunset_r", zoom=1.5, opacity=0.6,
                    ) #color=color para un solo color o paises para indice

        # fig = px.choropleth(df, geojson=world, locations=pais, color=peso, featureidkey="properties.name", 
        #             ) #color=color para un solo color o paises para indice

        fig.update(layout_coloraxis_showscale=True)
        fig.update_coloraxes(colorbar_title_text="Peso (Kg)")
        graph = go.Figure(
          data=[go.Bar(x=pais, y=peso, marker_color='indianred')],
          layout_title_text="Peso del producto segun paises"
         )
        graph.update_layout(
          xaxis_tickfont_size=14,
          yaxis=dict(
              title='Peso (Kg)',
              titlefont_size=16,
              tickfont_size=14,
          ),
         )

      if (options == 3):

         fig = px.choropleth_mapbox(df, geojson=world, locations=pais, color=valor, hover_name=pais, featureidkey="properties.name", mapbox_style="carto-positron",
                                    color_continuous_scale="Agsunset_r", zoom=1.5, opacity=0.6,
                    ) #color=color para un solo color o paises para indice
         fig.update(layout_coloraxis_showscale=True)
         fig.update_coloraxes(colorbar_title_text="Valor (Balboas)")
         graph = go.Figure(
          data=[go.Bar(x=pais, y=valor, marker_color='indianred')],
          layout_title_text="Valor en Balboas segun paises",
         )
         graph.update_layout(
          xaxis_tickfont_size=14,
          yaxis=dict(
              title='Valor (Balboas)',
              titlefont_size=16,
              tickfont_size=14,
          ),
         )


    fig.update_layout(geo = dict(showlakes=False))
    fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
    # fig.update_geos(fitbounds="locations",visible=False)
    fig.update_geos(showcountries=True, countrycolor="darkslategray")
    
    # if globo % 2 == 0:
    #   fig.update_geos(projection_type="orthographic")
    # else:
    #   fig.update_geos(projection_type="cylindrical equal area") 

    return fig, graph


app.run_server(mode='external') #no hay if main, es mode = external

"""### OMITIR"""

################3
#ejemplo dash
from urllib.request import urlopen
import json
with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:
    counties = json.load(response)

import pandas as pd
df = pd.read_csv("https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv",
                   dtype={"fips": str})

import plotly.express as px

fig = px.choropleth(df, geojson=counties, locations='fips', color='unemp',
                           color_continuous_scale="Viridis",
                           range_color=(0, 12),
                           scope="usa",
                           labels={'unemp':'unemployment rate'}
                          )
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig.show()

query = '''SELECT paises->>'pais' as Pais
        from expo
        where paises->>'id_producto' = ''' + "'" + ad + ''''
        '''

cur.execute(query)
tabla = from_db_cursor(cur)

print (tabla)



query = '''SELECT paises->>'pais' as Pais, paises->>'peso_neto' as Peso, paises->>'valor' as Valor, paises->>'unidad_medida'
        from expo
        where paises->>'id_producto' = ''' + "'" + id_prod[28] + ''''
        '''
cur.execute(query)

pais = []
peso = []
valor = []
unidad = []

results = cur.fetchall() ##Fetchall porque necesitamos los resultados en una variable

for line in range(len(results)):
  for x in range(4):
    if (x==0):
      pais.append(results[line][x])
    if (x==1):
      peso.append(int(results[line][x]))
    if (x==2):
      valor.append(int(results[line][x]))
    if (x==3):
      unidad.append(results[line][x])

print(pais)
print(peso)
print(valor)
print(unidad)
# for line, res in zip(range(len(results)), results): ## Ciclo For para añadir cada resultado a la lista paises como Strings
#   aa.append(convertTuple(res))

# print(aa)

import plotly.express as px

fig = px.choropleth_mapbox(df, geojson=world, color=[1],
                           locations=["Argentina"], featureidkey="properties.name",
                           mapbox_style="carto-positron", zoom=1.10)

# fig.update_geos(fitbounds="locations") 
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig.show()

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from jupyter_dash import JupyterDash  # pip install dash
import dash_cytoscape as cyto  # pip install dash-cytoscape==0.2.0 or higher
import dash
import dash_core_components as dcc
import dash_bootstrap_components as dbc
import dash_html_components as html
import plotly.graph_objects as go
import pandas as pd
import plotly.express as px
import numpy as np
from dash.dependencies import Output, Input
from dash import no_update


external_stylesheets = [
    {
        "href": "https://fonts.googleapis.com/css2?"
        "family=Lato:wght@400;700&display=swap",
        "rel": "stylesheet",
    },
]

app = JupyterDash(__name__, external_stylesheets=external_stylesheets) #JupyterDash en ves de dash.Dash
app.title = "Prueba"

app.layout = html.Div(
 
     children=[
        html.Div(
            children=[
                html.Br(),
                html.Br(),
                html.Br(),
                html.H1(
                    children="Exportaciones de Panamá", className="header-title"
                ),
                html.P(
                    children="Mapa interactivo de las exportaciones de Panamá en el año 2020",
                    className="header-description",
                ),
            ],
            className="header",
       ),

    ######Dropdowns
        html.Div(
          children=[
              html.Div(
                  children=[
                      html.Div(children="Productos", className="menu-title"),
                      dcc.Dropdown(
                          id="product",
                          options=[{"label":str(nom_prod[i]),"value":str(id_prod[i])} for i in range(len(nom_prod))], #{"label":str(nom_prod[i]),"value":str(id_prod[i])} for i in range(len(nom_prod))
                          multi = False,
                          value = id_prod[28],
                          className="dropdown",
                      ),
                  ], style={"width": "75%"}
              ),

              html.Div(
                  children=[
                      html.Div(children="Visualización", className="menu-title"),
                      dcc.Dropdown(
                          id="product2",
                          options=[{"label": "Solo Paises","value": 1},
                                {"label": "Por Peso","value": 2},
                                {"label": "por Valor (Balboas)", "value": 3}],
                          multi = False,
                          value = 1,
                          clearable=False,
                          searchable=False,
                          className="dropdown",
                      ),
                  ],
              ),
          ],
          className="menu",
        ),

#########drop

        html.Br(),
        html.Br(),

      ########Mapa y Gráfica
        html.Div(
            children=[
                html.Div(
                    children=dcc.Graph(id='mapa', config={"displayModeBar": False}, figure=fig, style={'width': '70vw', 'height': '80vh'}),
                    className="card",
                ),
            ],
            className="wrapper",
        ),

        html.Div(
            children=[
                html.Div(
                    children= dbc.Col(dcc.Graph(id="graph", config={"displayModeBar": False}, figure=fig, style={'width': '70vw', 'height': '80vh'})),
                    className="card",
                ),
            ],
            className="wrapper",
        )
    ]
) ##Fin del app.layout

app.run_server(mode='external') #no hay if main, es mode = external

# external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

# app = JupyterDash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP]) #JupyterDash en ves de dash.Dash
# app.title = "Prueba"

# app.layout = html.Div([
                       
#     dcc.Dropdown(id="product",
#                  options=[{"label":str(nom_prod[i]),"value":str(id_prod[i])} for i in range(len(nom_prod))],
#                     multi = False,
#                     value = id_prod[55],
#                     style = {'width': "65%"}
#                  ),

#      dcc.Dropdown(id="options",
#                  options=[{"label": "Solo Paises","value": 1},
#                           {"label": "Por Peso","value": 2},
#                           {"label": "por Valor (Balboas)", "value": 3}],
#                     multi = False,
#                     value = 1,
#                     style = {'width': "45%"}
#                  ),

#     html.Div(id="muestra", children=[]),

#     html.Br(),

#     dbc.Row(
#         [
#           dbc.Col(dcc.Graph(id='mapa', figure={}), width=3, md={'size': 2}),
#           dbc.Col(dcc.Graph(id="graph"), width=3, md={'size': 5})
#         ]
#     ),

#     html.Br(),

#     # dcc.Graph(id="graph"),
# ])

# html.Br(),
        # html.Br(),
        
        # dcc.Dropdown(id="product",
        #          options=[{"label":str(nom_prod[i]),"value":str(id_prod[i])} for i in range(len(nom_prod))],
        #             multi = False,
        #             value = id_prod[55],
        #             style = {"width": "80%"},
        #          ),

        # html.Br(),
        
        # dcc.Dropdown(id="options",
        #          options=[{"label": "Solo Paises","value": 1},
        #                   {"label": "Por Peso","value": 2},
        #                   {"label": "por Valor (Balboas)", "value": 3}],
        #             multi = False,
        #             value = 1,
        #             style = {"width": "35%", "align-items": "center", "justify-content": "center"}
        #          ),    

        # html.Br(),

